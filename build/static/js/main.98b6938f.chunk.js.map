{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","e","setState","defineProperty","target","id","value","Send","messages","state","fbData","push","user","message","textBox","$","ajax","type","url","data","JSON","stringify","contentType","dataType","done","responseText","fail","_handleKeyDown","key","react_default","a","createElement","build","style","paddingTop","className","md","map","item","i","textAlign","for","class","onKeyDown","onClick","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.98b6938f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Container, Row, Col } from 'react-grid-system';\nimport $ from 'jquery';\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      textBox: '',\n      fbData: [\n        {\n          user: 0,\n          message: \"Hi I'm the Chaka Bot!\"\n        }\n      ]\n    };\n  \n  }\n\n  onChange = (e) => {\n    this.setState({ [e.target.id]: e.target.value });\n  }\n\n  Send = () => {\n    var messages = this.state.fbData;\n    messages.push({\n      user: 1,\n      message: this.state.textBox\n    });\n\n    $.ajax({\n      type: 'POST',\n      url: `http://140.186.90.91:5000/prediction`, // asp connection\n      data: JSON.stringify({message: this.state.textBox}),\n      contentType: \"application/json; charset=utf-8\", //asp requirement\n      dataType: \"json\" //asp requirement\n    }).done((data) => {\n      var messages = this.state.fbData;\n      messages.push({\n        user: 0,\n        message: data.responseText\n      });\n      this.setState({\n        fbData: messages\n      });\n    }).fail((data) => {\n      var messages = this.state.fbData;\n      messages.push({\n        user: 0,\n        message: data.responseText\n      });\n      this.setState({\n        fbData: messages\n      });\n    });\n\n\n    this.setState({\n      textBox: '',\n      fbData: messages\n    });\n  }\n\n  _handleKeyDown = (e) => {\n    if (e.key === 'Enter') {\n      this.Send();\n    }\n  }\n\n  render() {\n    //const data = JSON.parse(fbData);\n    return (\n      <Container style={{ paddingTop: 20 }}>\n        <header>\n          <h1><i className=\"icon heart is-large\"></i>Tyler Bot</h1>\n          <p>Talk with Chaka without the hassle of actually bothering him!</p>\n        </header>\n\n        <Row>\n          <Col md={12}>\n            <div className=\"nes-container\">\n              <h2 className=\"title\"></h2>\n            {this.state.fbData.map((item,i) => {\n              return( \n                <section className={item.user === 0 ? \"message -left\":\"message -right\"}  style={{textAlign: item.user === 0 ? \"left\":\"right\"}}>\n                  <div className={item.user === 0 ? \"nes-balloon from-left\":\"nes-balloon from-right\"}>\n                    <p>{item.message}</p>\n                  </div>\n                </section>\n            )              \n            })}\n\n            <label for=\"name_field\">Your message</label>\n            <div class=\"nes-field is-inline\">\n              <input type=\"text\" id=\"textBox\" class=\"nes-input\" onChange={this.onChange} value={this.state.textBox} onKeyDown={this._handleKeyDown}></input>\n              <button type=\"button\" class=\"nes-btn is-primary\" onClick={this.Send}>Send</button>\n            </div>\n            </div>\n            <footer className=\"footer\">\n              <p>\n                <a href=\"https://github.com/nostalgic-css/NES.css\">Theme by B.C.Rikko</a>\n              </p>\n            </footer>\n          </Col>\n        </Row>\n      </Container>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}